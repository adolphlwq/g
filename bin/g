#!/bin/bash

#
# Setup
#

g_version="0.0.1"
g_prefix=/usr/local
g_work_dir=${g_prefix}/golang
g_base_version_dir=${g_prefix}/golang/versions
g_base_url='https://storage.googleapis.com/golang'
env_file=
active_version=
download_versions=

usage(){
    cat <<-EOF
    Usage: g [options] [COMMAND] [args]

    Commands:

      g                   Output help information
      g ls                Output all Golang versions
      g use               Use specific version
      g rm                Remove the given version
      g info              Display installed golang package information

    Options:

      -h, --help          Display help information
EOF
}

display_remote_versions(){
    versions=$(curl -L -# ${g_base_url} \
      |egrep -o 'go[1-9]\.[1-9](\.[1-9])?' \
      |sort -u -r)
    echo
    for v in $versions; do
      printf "  $v\n"
    done
    echo
}

mkdir_not_exist_dir(){
    if ! test -d $1;then
        sudo mkdir -p $1
    fi
}

#
# Download specific golang version
#
download_specific_version(){
    mkdir_not_exist_dir ${g_base_version_dir}
    go_dir=${g_base_version_dir}/$1
    if test -d $go_dir;then
      echo "$1 have been downloaded!"
      exit
    fi
    mkdir_not_exist_dir $go_dir
    go_tar=$1.linux-amd64.tar.gz
    dl_url=${g_base_url}/$go_tar
    sudo curl -L -# $dl_url | sudo tar -zxf - -C $go_dir
}

#
# Use version
#
use(){
    versions=$(curl -L -# ${g_base_url} \
      |egrep -o 'go[1-9]\.[1-9](\.[1-9])?' \
      |sort -u -r)
    PS3="Please choose your golang version: "
    select opt in $versions; do
        activate $opt;break
    done
}

#
# activate specific golang version
# input: go version:1.5 or 1.5.3
#
activate(){
    need_active_version=$1
    get_download_versions
    if ! echo "${download_versions[@]}"|grep -w "^$need_active_version$" &>/dev/null;then
      download_specific_version $need_active_version
    fi
    need_activate_dir=${g_base_version_dir}/${need_active_version}/go
    activate_goroot ${need_activate_dir}
}

#
# ativate GOROOT
# input: GOROOT
#
activate_goroot(){
    goroot=$1
    # identify which shell
    get_env_file
    if [ ! -f ~/${env_file} ];then
      touch ~/${env_file}
    fi
    env_goroot=$(grep "^export GOROOT" ~/${env_file})
    if [ -z "${env_goroot}" ];then
      echo export GOROOT=$goroot >> ~/${env_file}
      sed -i '$ a\export PATH=$GOROOT/bin:$PATH' ~/${env_file}
    else
      sed "s@$env_goroot@export GOROOT=$goroot@" -i ~/${env_file}
      env_path=$(cat ~/${env_file} | grep PATH | grep "\$GOROOT/bin")
      if [ -z "${env_path}" ];then
        sed -i '/^export GOROOT=/ a export PATH=$GOROOT/bin:$PATH' ~/${env_file}
      fi
    fi
    source ~/${env_file}
}

get_env_file(){
    env_file=`echo $SHELL | sed 's@/usr/bin/@@' | sed -e 's/^/./' -e 's/$/rc/'`
}

get_active_version(){
    get_env_file
    active_version=`cat ~/${env_file} | egrep -o 'go[1-9]\.[1-9](\.[1-9])?'` # e.g. go1.6.1
}

get_download_versions(){
    download_versions=`find ${g_base_version_dir} -maxdepth 1 -mindepth 1 -type d \
             | egrep -o 'go[1-9]\.[1-9](\.[1-9])?'\
             | sort -u -r`
}

#
# remove download versions except which is in use
#
remove_version(){
    get_active_version
    get_download_versions
    echo ${active_version}
    download_versions_without_in_use=`find ${g_base_version_dir} -maxdepth 1 -mindepth 1 -type d \
        | egrep -o 'go[1-9]\.[1-9](\.[1-9])?' \
        | grep -v "^${download_versions_without_in_use}$"`
    echo
    PS3="Please choose your golang version to remove: "
    select opt in ${download_versions_without_in_use};do
        do_remove $opt;break
    done
}

do_remove(){
    sudo rm -rf ${g_base_version_dir}/$1
    echo remove $1 successfully.
}

#
# state golang versions information
#
state_golang_info(){
    get_active_version
    get_download_versions
    #format_download_versions=`echo ${download_versions} \
    #                          |sed 's@^@  @g'`
    cat <<-EOF
qGo version:
  ${g_version}
Golang version in used:
  ${active_version}
Base directory:
  ${g_work_dir}
Download direstory:
  ${g_base_version_dir}
Downloaded packages:
`for dl in ${download_versions}
  do
    echo "  -$dl"
  done`
EOF
}

#
# Handle argements.
#
if test $# -eq 0;then
  usage
else
  while test $# -ne 0;do
    case $1 in
      ls) display_remote_versions;;
      -h|--help) usage;;
      use) use; exit;;
      rm) remove_version; exit;;
      info) state_golang_info; exit;;
      *) usage; exit;;
     esac
     shift
  done
fi
