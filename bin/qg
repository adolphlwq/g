#!/bin/bash

#
# Setup
#

VERSION="0.0.1"
G_PREFIX=/usr/local
BASE_VERSION_DIR=$G_PREFIX/golang/versions
BASE_ACTIVE_DIR=$G_PREFIX/bin
BASE_URL='https://storage.googleapis.com/golang'
ENV_FILE=~/.bashrc
#
# State
#
DEFAULT=0
QUIET=true
ACTIVATE=true

usage(){
    cat <<-EOF

    Usage: g [options] [COMMAND] [args]

    Commands:

      g                   Output help information
      g ls                Output all Golang versions
      g <version>         Install or activate Golang <version>
      g rm <version>      Remove the given version(s)
      g latest            Install or activate latest Golang release

    Options:
      
      -V, --version        Output current version of g
      -h, --help           Display help information
      -d, --download       Download only
EOF
}

display_remote_versions(){
    versions=$(curl -L -# $BASE_URL \
      |egrep -o 'go[1-9]\.[1-9](\.[1-9])?' \
      |sort -u)
    echo
    for v in $versions; do
      printf "  $v\n"
    done
    echo
}

mkdir_not_exist_dir(){
    if ! test -d $1;then
        sudo mkdir -p $1
    fi
}

#
# Download specific golang version
#
download_specific_version(){
    mkdir_not_exist_dir $BASE_VERSION_DIR
    go_dir=$BASE_VERSION_DIR/$1
    if test -d $go_dir;then
      echo "$1 have been downloaded!"
      exit
    fi
    sudo mkdir -p $go_dir
    go_tar=$1.linux-amd64.tar.gz
    dl_url=$BASE_URL/$go_tar
    sudo curl -L -# $dl_url | sudo tar -zxf - -C $go_dir
}

#
# Use version
#
use(){
    versions=$(curl -L -# $BASE_URL \
      |egrep -o 'go[1-9]\.[1-9](\.[1-9])?' \
      |sort -u)
    PS3="Please choose your golang version: "
    select opt in $versions; do
        activate $opt;break
    done
}

#
# activate specific golang version
# input: go version:1.5 or 1.5.3
#
activate(){
    set -x
    need_active_version=$1
    download_versions=$(find $BASE_VERSION_DIR -maxdepth 1 -mindepth 1 -type d|egrep -o "go[1-9]\.[1-9](\.[1-9])?"|sort -u)
    if ! echo "${download_versions[@]}"|grep -w "^$need_active_version$" &>/dev/null;then
      download_specific_version $need_active_version
    fi
    current_version=$(find $BASE_ACTIVE_DIR -maxdepth 1 -mindepth 1 -type d|egrep -o "go[1-9]\.[1-9](\.[1-9])?"|sort -u)
    if [ -z $current_version ];then
      sudo cp -fR $BASE_VERSION_DIR/$need_active_version $BASE_ACTIVE_DIR
      activate_goroot $BASE_ACTIVE_DIR/$need_active_version/go
    else
      if test $current_version -eq $need_avtive_version;then
        echo "activate $need_active_version successfully!"
      else
        sudo rm -rf $BASE_ACTIVE_DIR/$current_version
        sudo cp -fR $BASE_VERSION_DIR/$need_active_version $BASE_ACTIVE_DIR
        activate_goroot $BASE_ACTIVE_DIR/$need_active_version/go
      fi
    fi
}

#
# activate GOROOT
# input: GOROOT
#
activate_goroot(){
    goroot=$1
    if [ ! -f $ENV_FILE ];then
      touch $ENV_FILE
    fi
    is_path=$(grep "^export GOROOT" $ENV_FILE)
    if [ -z $is_path ];then
      sed '$aexport GOROOT=$goroot' -i $ENV_FILE
    else
      sed "s@$is_path@export GOROOT=$goroot@" -i $ENV_FILE
    fi
    source $ENV_FILE
}

#
# remove version
#
remove_version(){
    echo "hello"
}

#
# Handle argements.
#
if test $# -eq 0;then
  usage
else
  while test $# -ne 0;do
    case $1 in
      -ls|--list) display_remote_versions;;
      -h|--help) usage;;
      -dl|--download) download_specific_version $2; exit;;
      -use) use; exit;;
      *) usage; exit;;
     esac
     shift
  done
fi
